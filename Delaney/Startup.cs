/*********************************************************
       Code Generated By  .  .  .  .  Delaney's Script Bot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Version.  .  .  .  .  .  .  .  10.0.0.14 
       Build  .  .  .  .  .  .  .  .  20191113 216
       Template Name.  .  .  .  .  .  Project Green 2.0
       Template Version.  .  .  .  .  20191111 001
       Author .  .  .  .  .  .  .  .  Delaney

                          .___,
                       ___('v')___
                       `"-\._./-"'
                           ^ ^

 *********************************************************/

using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.AspNetCore.Authentication.Cookies;
using System;
using Microsoft.AspNetCore.Authorization;
using Newtonsoft.Json.Serialization;

namespace Delaney
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllersWithViews().AddNewtonsoftJson();


            services.Configure<CookiePolicyOptions>(options =>
            {
                // This lambda determines whether user consent for non-essential cookies is needed for a given request.
                options.CheckConsentNeeded = context => true;
                options.MinimumSameSitePolicy = SameSiteMode.None;
            });



            // Scoped in this case means scoped to a HTTP request,
            // which also means it is a singleton while the current request is running.
            //services.AddScoped<Services.Data.Core.IUnitOfWork, Services.Data.Persistence.UnitOfWork>();

            // We are using AddSingleton in the demo environment
            services.AddSingleton<Services.Data.Core.IUnitOfWork, Services.Data.Persistence.UnitOfWork>();

            services
                .AddMvc(setupAction => 
                        {
                            setupAction.EnableEndpointRouting = false;
                        })
                .AddNewtonsoftJson(options =>
                                   options.SerializerSettings.ContractResolver =
                                      new CamelCasePropertyNamesContractResolver())
                .AddRazorRuntimeCompilation();

            

            services.AddAuthentication(options => {
                options.DefaultAuthenticateScheme = CookieAuthenticationDefaults.AuthenticationScheme;
                options.DefaultSignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;
                options.DefaultChallengeScheme = CookieAuthenticationDefaults.AuthenticationScheme;
            })
                .AddCookie(options => {
                    options.LoginPath = "/account/signin";
                    options.LogoutPath = "/account/signout";
                });
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app)
        {
#if DEBUG
                app.UseDeveloperExceptionPage();
#else
                app.UseExceptionHandler("/Home/Error");
                app.UseHsts();
#endif


           // app.UseRewriter(new RewriteOptions().AddRedirectToHttps(301, 44343));


            app.UseHttpsRedirection();
            app.UseStaticFiles();
            app.UseCookiePolicy();

            app.UseAuthentication();


            app.UseMvc(routes =>
            {
                routes.MapRoute(
                    name: "area",
                    template: "{area:exists}/{controller=Home}/{action=Index}/{id?}");

                routes.MapRoute(
                    name: "default",
                    template: "{controller=Home}/{action=Index}/{id?}");
            });

#if RELEASE
            app.Run(async (context) =>
            {
                await context.Response.WriteAsync("<style>body {background-color: black;} p{color:red; text-align: center; font-family: monospace; font-size:16px} div.solid {border-style: solid; border-color: red; padding: 10px; border-width: 5px;}</style><body><div class='solid'><p>HTTP Page not found. 404&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Press back button to continue.</p><p>Guru Meditation #22000006.8400000E</p><div></body>");
            });
#endif
        }
    }
}
