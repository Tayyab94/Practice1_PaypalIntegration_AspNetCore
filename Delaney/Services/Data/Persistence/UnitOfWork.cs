/*********************************************************
       Code Generated By  .  .  .  .  Delaney's Script Bot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Version.  .  .  .  .  .  .  .  10.0.0.14 
       Build  .  .  .  .  .  .  .  .  20191113 216
       Template Name.  .  .  .  .  .  Project Green 2.0
       Template Version.  .  .  .  .  20200426 009
       Author .  .  .  .  .  .  .  .  Delaney

                      ,        ,--,_
                       \ _ ___/ /\|
                       ( )__, )
                      |/_  '--,
                        \ `  / '

**********************************************************/
using System.Collections.Generic;
using System.Linq;
using System;

using System.IO;
using System.Xml;
using System.IO.Compression;
using System.Xml.Serialization;
using Delaney.Services.Data.Core.Repositories;
using Delaney.Services.Data.Core.Domain;

namespace Delaney.Services.Data.Persistence
{
    public partial class UnitOfWork : Core.IUnitOfWork
    {
        public UnitOfWork()
        {
            _dataSet = new DataSet();

            Invoices = new Repositories.InvoiceRepository(this);
            Baskets = new Repositories.BasketRepository(this);
            Products = new Repositories.ProductRepository(this);
        }
    
        public bool IncludeDeleted { get; set; }
        public static bool Commit { get; set; } = true;

        public IInvoiceRepository Invoices { get; private set; }

        public IBasketRepository Baskets { get; private set; }

        public IProductRepository Products { get; private set; }


        public DataStoreResult Complete()
        {
            // Write the data store.
            return DataStoreResult.Success;
        }
        /// <summary>
        /// Get the children Products and assign them to basket.Products 
        /// </summary>
        /// <param name="basket">
        /// The Parent
        /// </param>
        public void GetProducts(
            Core.Domain.Basket basket)
        {
            if(basket != null)
            {
                basket.Products = _dataSet.Products.Where(m => m.BacketId == basket.Id).ToList();
            }
        }

        /// <summary>
        /// Get the children Baskets and assign them to basket.Products 
        /// </summary>
        /// <param name="basket">
        /// The Parent
        /// </param>
        public void GetBasket(
            Core.Domain.Product product)
        {
            if (product != null)
            {
                product.Basket = _dataSet.Baskets.Where(m => m.Id == product.BacketId).FirstOrDefault();
            }
        }


        #region Common methods for Invoice
        public void Add(IEnumerable<Core.Domain.Invoice> invoices)
        {
            foreach(var invoice in invoices)
                Add(invoice);
        }
        
        public void Add(Core.Domain.Invoice core)
        {
            if(core == null)
                return;

            Core.Domain.Invoice invoice = null;

            if(core.Id != null)
                invoice = _dataSet.Invoices.SingleOrDefault(x => x.Id == core.Id);

            if (invoice == null)
                // Add the new invoice
                _dataSet.Invoices.Add(core);
            else
                invoice.Update(core);
        }
        


        public DataStoreResult Delete(IEnumerable<Core.Domain.Invoice> invoices)
        {
            DataStoreResult dataStoreResult = DataStoreResult.Success;

            if((invoices as List<Core.Domain.Invoice>) == null)
                return dataStoreResult; 


            for (int i = 0; i < invoices.Count(); i++)
            {
                dataStoreResult = Delete((invoices as List<Core.Domain.Invoice>)[i]);

                if (dataStoreResult != DataStoreResult.Success)
                    break;
            }

            return dataStoreResult;
        }


        public DataStoreResult Delete(Core.Domain.Invoice invoice)
        {
            var model = _dataSet.Invoices
                                .SingleOrDefault(x => x.Id == invoice.Id);

            if (model != null)
            {
                _dataSet.Invoices.Remove(model);
            }

            return DataStoreResult.Success;
        }

        public DataStoreResult Delete(IEnumerable<Core.Domain.Basket> baskets)
        {
            DataStoreResult dataStoreResult = DataStoreResult.Success;

            if ((baskets as List<Core.Domain.Basket>) == null)
                return dataStoreResult;


            for (int i = 0; i < baskets.Count(); i++)
            {
                dataStoreResult = Delete((baskets as List<Core.Domain.Basket>)[i]);

                if (dataStoreResult != DataStoreResult.Success)
                    break;
            }

            return dataStoreResult;
        }


        public DataStoreResult Delete(Core.Domain.Basket basket)
        {
            var model = _dataSet.Baskets
                                .SingleOrDefault(x => x.Id == basket.Id);

            if (model != null)
            {
                _dataSet.Baskets.Remove(model);
            }

            return DataStoreResult.Success;
        }

        public DataStoreResult Delete(IEnumerable<Core.Domain.Product> products)
        {
            DataStoreResult dataStoreResult = DataStoreResult.Success;

            if ((products as List<Core.Domain.Product>) == null)
                return dataStoreResult;


            for (int i = 0; i < products.Count(); i++)
            {
                dataStoreResult = Delete((products as List<Core.Domain.Product>)[i]);

                if (dataStoreResult != DataStoreResult.Success)
                    break;
            }

            return dataStoreResult;
        }


        public DataStoreResult Delete(Core.Domain.Product product)
        {
            var model = _dataSet.Products
                                .SingleOrDefault(x => x.Id == product.Id);

            if (model != null)
            {
                _dataSet.Products.Remove(model);
            }

            return DataStoreResult.Success;
        }


        /// <summary>
        /// Delete a Core.Domain.Invoice using its Id as a reference
        /// </summary>
        /// <param name="Id">
        /// Id of the Core.Domain.Invoice to be deleted.
        /// </param>
        /// <returns>
        /// DataStoreResult to communicate the outcome
        /// </returns>
        public DataStoreResult DeleteInvoice(int? Id)
        {
            var invoice = 
                _dataSet.Invoices
                        .SingleOrDefault(x => x.Id == Id);

            if(invoice == null)
                return DataStoreResult.NotFound;
                
            return Delete(invoice);
        }


        /// <summary>
        /// Find and return an instance of Core.Domain.Invoice using its Id reference
        /// </summary>
        /// <param name="Id">
        /// Id Reference
        /// </param>
        /// <returns>
        /// Returns an instance of a Core.Domain.Invoice
        /// </returns>
        public Core.Domain.Invoice FindInvoice(int? Id)
        {
            if(Id == null)
                return null;
        
            return _dataSet.Invoices
                           .SingleOrDefault(x => x.Id == Id);
        }
        #endregion

        public void Add(Basket core)
        {
            if (core == null)
                return;

            Core.Domain.Basket basket = null;

            if (core.Id != null)
                basket = _dataSet.Baskets.SingleOrDefault(x => x.Id == core.Id);

            if (basket == null)
                // Add the new invoice
                _dataSet.Baskets.Add(core);
            else
                basket.Update(core);
        }

        public void Add(IEnumerable<Basket> backets)
        {
            foreach (var backet in backets)
                Add(backet);
        }

        public void Add(Product core)
        {
            if (core == null)
                return;

            Core.Domain.Product product = null;

            if (core.Id != null)
                product = _dataSet.Products.SingleOrDefault(x => x.Id == core.Id);

            if (product == null)
                // Add the new invoice
                _dataSet.Products.Add(core);
            else
                product.Update(core);
        }

        public void Add(IEnumerable<Product> products)
        {
            foreach (var product in products)
                Add(product);
        }


        #region DataSet Fields and Properties
        private static DataSet _dataSet;

        public static DataSet DataSet
        {
            get
            {
                if(_dataSet == null)
                    _dataSet = new DataSet();

                return _dataSet;
            }
        }
        #endregion


        public void Dispose()
        {
        }


    }
}
