/*********************************************************
       Code Generated By  .  .  .  .  Delaney's Script Bot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Version.  .  .  .  .  .  .  .  10.0.0.14
       Build  .  .  .  .  .  .  .  .  20191113 216
       Template Name.  .  .  .  .  .  Project Green 2.0
       Template Version.  .  .  .  .  20200428 002
       Author .  .  .  .  .  .  .  .  Delaney

                          .___,
                       ___('v')___
                       `"-\._./-"'
                           ^ ^

*********************************************************/

using System;
using System.Linq;
using System.Collections.Generic;
using System.Linq.Expressions;


namespace Delaney.Services.Data.Persistence.Repositories
{
    public partial class BasketRepository : Core.Repositories.IBasketRepository
    {
        private readonly UnitOfWork _unitOfWork;

        public BasketRepository(UnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }

        public bool IncludeDeleted { get; set; }

        public Core.Domain.Basket Get(int? id)
        {
            return UnitOfWork.DataSet.Baskets
                                     .SingleOrDefault(x => x.Id == id);
        }

        public Core.Domain.Basket SingleOrDefault(Func<Core.Domain.Basket, bool> predicate)
        {
            return UnitOfWork.DataSet.Baskets
                                     .Where(predicate)
                                     .FirstOrDefault();
        }

        public bool Add(Core.Domain.Basket entity)
        {
            if(entity == null)
                return false;

                entity.CreatedDate = DateTime.Now;
                _unitOfWork.Add(entity);

            return true;        
        }

        public bool AddRange(IEnumerable<Core.Domain.Basket> entities)
        {
            if(entities == null)
                return false;

            foreach(var entity in entities)
            {
                 entity.CreatedDate = DateTime.Now;

                _unitOfWork.Add(entity);
            }

            return true;
       }


        public IEnumerable<Core.Domain.Basket> GetAll()
        {
            return UnitOfWork.DataSet.Baskets
;
        }

        public IEnumerable<Core.Domain.Basket> Find(Func<Core.Domain.Basket, bool> predicate)
        {
            return UnitOfWork.DataSet.Baskets
                                     .Where(predicate);
        }

        /// <summary>
        /// Get the parent Basket for the collection of products and assign it the product.Backet.
        /// </summary>
        public void Get(IEnumerable<Core.Domain.Product> products)
        {
            if (products == null)
                return;

            foreach(var product in products)
                Get(product);
        }

        /// <summary>
        /// Get the parent Basket for product and assign it the product.Backet.
        /// </summary>
        public void Get(Core.Domain.Product product)
        {
            if (product == null)
                return;

            product.Basket = 
                    UnitOfWork.DataSet.Baskets
                                      .SingleOrDefault(x => x.Id == product.BacketId);
        }
        public Core.Domain.Basket GetWithParents(int id)
        {
            var entity = UnitOfWork.DataSet.Baskets
                                           .SingleOrDefault(x => x.Id == id);

            return entity;
        }

        public Core.Domain.Basket GetWithChildren(int id)
        {
            var entity = UnitOfWork.DataSet.Baskets
                                           .SingleOrDefault(x => x.Id == id);

            _unitOfWork.GetProducts(entity);

            return entity;
        }
        public Core.Domain.Basket GetWithFamily(int id)
        {
            var entity = UnitOfWork.DataSet.Baskets
                                           .SingleOrDefault(x => x.Id == id);
            _unitOfWork.GetProducts(entity);
            return entity;
        }
        public DataStoreResult Remove(int id,
                                      out string errorMessage)
        {
            var entity = Get(id);

            if (entity == null)
            {
                errorMessage = "";
                return DataStoreResult.Success;
            }

            return Remove(entity, out errorMessage);
        }

        public DataStoreResult Remove(Core.Domain.Basket entity,
                                      out string errorMessage)
        {
            errorMessage = "";

            if (entity == null)
            {
                errorMessage = "";
                return DataStoreResult.Success;
            }

            return _unitOfWork.Delete(entity);
        }

        public DataStoreResult RemoveRange(IEnumerable<Core.Domain.Basket> entities,
                                           out string errorMessage)
        {
            if (entities == null)
            {
                errorMessage = "The baskets are present";
                return DataStoreResult.Failed;
            }

            errorMessage = "";
            return _unitOfWork.Delete(entities);
        }
    }
}

