/*********************************************************
       Code Generated By  .  .  .  .  Delaney's Script Bot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Version.  .  .  .  .  .  .  .  10.0.0.14 
       Build  .  .  .  .  .  .  .  .  20191113 216
       Template Name.  .  .  .  .  .  Project Green 2.0
       Template Version.  .  .  .  .  20200306 002
       Author .  .  .  .  .  .  .  .  Delaney

                      ,        ,--,_
                       \ _ ___/ /\|
                       ( )__, )
                      |/_  '--,
                        \ `  / '
 
 Note: Create this object,
       populate from properties from the Core.Domain classes
       and send to a view.

Object Models
-------------
What can this object do.

* GetBacket()
  Two overrides to get the parent backet for the object.
  This is used to display parent in a summary table.

* GetModels()
  Return a model containing propeties populated with the objects values

* GetCreatedAndUpdated()
  Two overrides to get {user class pascal plural} who created updated this object
  and assign them to CreatedBy and UpdatedBy properties.
 
 *********************************************************/

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;

namespace Delaney.Models
{
    public partial class Product
    {
        private Delaney.Services.Data.Core.Domain.Product _core;
        #region Constructors
        
        // This constructor is used by HTTP posts 
        public Product ()
        {
            _core = new Delaney.Services.Data.Core.Domain.Product();
        }
        public Product(Delaney.Services.Data.Core.Domain.Product core)
        {
            _core = core ??   
	        throw new NullReferenceException("The Delaney.Services.Data.Core.Domain.Product cannot be null");
        }
        #endregion

        #region Properties
        public Delaney.Services.Data.Core.Domain.Product GetCore()
        {
            return _core;
        }

        /// <summary>
        /// Primary Key
        /// </summary>
        #region Id
        [DisplayName("Id")]
        public int? Id
        {
            get
            {
                return _core.Id;
            }
            set
            {
                if (_core.Id != value)
                    _core.Id = value;
            }
        }
        #endregion

        #region Description
        [Required]
        [StringLength(255)]
        [DisplayName("Description")]
        public string Description
        {
            get
            {
                return _core.Description;
            }
            set
            {
                if (_core.Description != value)
                    _core.Description = value;
            }
        }
        #endregion

        #region Name
        [Required]
        [StringLength(255)]
        [DisplayName("Name")]
        public string Name
        {
            get
            {
                return _core.Name;
            }
            set
            {
                if (_core.Name != value)
                    _core.Name = value;
            }
        }
        #endregion

        #region Price
        [Required]
        [DisplayName("Price")]
        public decimal Price
        {
            get
            {
                return _core.Price;
            }
            set
            {
                if (_core.Price != value)
                    _core.Price = value;
            }
        }
        #endregion

        #region Quantity
        [Required]
        [DisplayName("Quantity")]
        public int Quantity
        {
            get
            {
                return _core.Quantity;
            }
            set
            {
                if (_core.Quantity != value)
                    _core.Quantity = value;
            }
        }
        #endregion

        [Required]
        [DisplayName("Backet")]
        public int? BacketId
        {
            get
            {
                return _core.BacketId;
            }
            set
            {
                if (_core.BacketId != value)
                {
                    _core.BacketId = value;              
                    _backet = null;
                }
            }
        }
        private Models.Basket _backet;
        public Models.Basket Backet
        {
            get
            {
                if (_backet == null)
                    if (_core.Basket != null)
                        _backet = new Models.Basket(_core.Basket);

                return _backet;
            }
            set
            {
                if (_backet != value)
                {
                    _backet = value;

                    if (_backet == null)
                    {
                        _core.BacketId = null;
                    }
                    else
                    {
                        if (_core.BacketId != _backet.Id)
                            _core.Basket = _backet.GetCore();

                        _core.BacketId = _backet.Id;
                    }
                }
            }
        }

        [DisplayName("Backet")]
        public string BacketString
        { 
            get
            {
                return Backet?.ToString();
            }
        }



        #region CreatedDate
        [DisplayName("Created Date")]
        public DateTime? CreatedDate
        {
            get
            {
                return _core.CreatedDate;
            }
            set
            {
                if (_core.CreatedDate!= value)
                    _core.CreatedDate = value;
            }
        }
        #endregion

        [DisplayName("Created Date")]
        public string CreatedDateString
        {
            get
            {
                return CreatedDate?.ToString(Delaney.Settings.DateFormatShort);
            }
        }




        [DisplayName("Date")]
        public string DateDisplayed
        {
            get
            {
                return CreatedDate?.ToString("yyyy-MM-dd");
            }
        }

        [DisplayName("Date Time")]
        public string DateTimeDisplayed
        {
            get
            {
                return CreatedDate?.ToString("yyyy-MM-dd HH:mm:ss");
            }
        }
        #endregion

        #region GUID
        [DisplayName("GUID")]
        public string GUID
        {
            get
            {
                return _core.GUID;
            }
            set
            {
                if (_core.GUID != value)
                    _core.GUID = value;
            }
        }
        #endregion

        public bool IsSelected { get; set; }

        /// <summary>
        /// Create model children and populate them with core children.
        /// </summary>
        //public void PopulateChilden()
        //{
        //}



        public override string ToString()
        {
            return Name;
        }
    }
}